#!/usr/bin/python

import sys
import yaml
import os
import re
from tempfile import TemporaryFile, NamedTemporaryFile
from subprocess import Popen

# txt2tags render: ###########################################################

def txt2tags(intext):
    t2tinfd = NamedTemporaryFile()
    t2tinfd.write('\n\n\n\n' + intext)
    t2tinfd.flush()
    t2toutfd = TemporaryFile()
    try:
        t2t = Popen(['txt2tags', '-t', 'xhtml', '-H', '-i', t2tinfd.name, '-o', '-'], stdout = t2toutfd)
        retcode = t2t.wait()
        if retcode < 0:
            print >>sys.stderr, "Child was terminated by signal", -retcode
        elif retcode != 0:
            print >>sys.stderr, "Child returned", retcode
    except OSError, e:
        print >>sys.stderr, "Execution failed:", e
    t2toutfd.seek(0)
    return t2toutfd.read()

# Info get: ##################################################################

def yamlget(d):
    yfilename = os.path.join(d, 'info.yaml')
    if not os.path.isfile(yfilename):
        return {}
    return yaml.load(open(yfilename).read())


def dirscalc(infilename):
    dirname =  os.path.join('.', os.path.dirname(infilename))
    top = ''
    breadcrumbs = []
    dirs = dirname.split(os.sep)
    dirs = [ d for d in dirs if d != '' ]
    lvl = len(dirs) - 1
    yt = yaml.load(open('infotree.yaml').read())
    yc = yt
    p = ''
    first = True
    for d in dirs:
        if d != '.' and yc['sub'].has_key(d):
            yc = yc['sub'][d]
        p = os.path.join(p, d)
        i = 'index.html'
        for l in range(lvl, 0, -1):
            i = os.path.join('..', i)
        breadcrumbs.append({ 'title': yc['title'], 'url': i, 'first' : first})
        first = False
        if lvl > 0:
            top = os.path.join(top, '..')
        lvl = lvl - 1
    if top == '':
        top = '.'
    return top, breadcrumbs


def infoget(infilename):
    indirname = os.path.dirname(infilename)
    y = yamlget('.')
    y.update(yamlget(indirname))
    if y.has_key('disqus') and not y.has_key('disqus_id'):
        y['disqus_id'] = os.path.basename(indirname)
    y['top'], y['breadcrumbs'] = dirscalc(infilename)
    y['url'] = os.path.join(y['home'], indirname, 'index.html')
    return y


# Process input file: ########################################################

def templated(infilename, template, y):
    from tempfile import TemporaryFile
    from os.path import isfile
    from subprocess import Popen

    if not isfile(infilename):
        raise SystemExit("error: can't find %s" % infilename)
    infd = open(infilename)
    outfd = TemporaryFile()
    if template:
        outfd.write('<%%inherit file="%s.html"/>\n' % template)
    for l in infd:
        outfd.write(l)
    outfd.seek(0)
    return outfd.read()


# Render output: #############################################################

def makorender(data, y):
    from mako.template import Template
    from mako.lookup import TemplateLookup

    lookup = TemplateLookup(['templates'])
    return Template(data, lookup=lookup).render(txt2tags=txt2tags, **y)


# Main: ######################################################################

def main():
    from optparse import OptionParser

    parser = OptionParser("usage: %prog [-t template] <input> <output>")
    parser.add_option("-t", "--template", dest="template", help="Template to use, if any")
    opts, args = parser.parse_args(sys.argv[1:])
    if len(args) != 2:
        parser.error("wrong number of arguments") # Will exit

    infilename = args[0]
    outfilename = args[1]

    info = infoget(infilename)
    htmlstr = templated(infilename, opts.template, info).replace('$cwd$/', '')
    out = open(outfilename, 'w')
    out.write(makorender(htmlstr, info))


if __name__ == "__main__":
    main()

