---
layout: default
title: Debianization with git-buildpackage
---

After building some useful piece of software, one has to decide how to best
deploy it. In UNIX, the standard way to do that is by publishing the source
code in .tar.gz format and requiring users to compile it.

In Debian there is an alternative: using a .deb package. With a .deb package, a
single <code>dpkg -i <i>package.deb</i></code> installs the software.

This article explains how to create and support a .deb package for a simple
software maintained in git, by tracking the packaging scheme in a specific
branch on the same repository.

<h3>Prerequisites</h3>
In order to ease the packaging and keep your package warning-free, it should
have in its main repository:
<ul>
	<li>An AUTHORS file with copyright information.</li>
	<li>A manual.</li>
	<li>A COPYING file with GPL information or some other license.</li>
	<li>A Makefile with the targets "all", "clean" and "install". The "install"
	target should install the binary in <code>$(PREFIX)/bin</code> and the
	manual to <code>$(PREFIX)/share/man/man#</code>. <code>PREFIX</code> should
	be, by default, <code>/usr/local</code>, so that non-debian users can still
	user your package.</li>
	<li>A way to create <code><i>package</i>_<i>version</i>.tar.gz</code>
	(<i>make dist</i>). We will use it to import the original source files into
	the debian package build structure.</li>
</ul>
These items are not debian-specific and are useful for everyone.

<h3>Initial packaging setup</h3>
The first step is to create the debian branches in the git repository. On the
debian-upstream branch, we will store the source files of the "upstream"
versions, while the debian-debian branch will have the debian package data.
This separation provides a cleaner revision history by separating the changes
that affect the software from the changes in the packaging.

In order to create these branches, we issue the following commands in the git
repository:
<code>
	git symbolic-ref HEAD refs/heads/debian-upstream
	git rm --cached -r .
	git clean -xfd
	git commit --allow-empty -m 'Start of debian branches.'
	git branch debian-debian
</code>

That will make both branches point to a root-commit with no files.

After putting <i>package</i>_<i>version</i>.orig.tar.gz in the directory above
the current one, we can take the next step, which is the creation of the
initial <i>debian/</i> dir in the <i>debian-debian</i> branch:
<code>
	dh_make -s -p <i>package</i>_<i>version</i>
</code>
You can now customize the standard debian/ dir created. The only required files
that must be fixed are: changelog, compat, control, copyright and rules.
Besides filling package-specific information, you should also:
<ul>
	<li>Put, in debian/rules file:
	<code>
		override_dh_auto_install: $(MAKE) PREFIX=$(CURDIR)/debian/usr install
	</code>
	</li>
	<li>Create a debian/<i>package</i>.manpages file with the name of the
	manpage file of the package.</li>
	<li>Create a debian/gbp.conf with the following contents:
	<code>
		[DEFAULT]
		upstream-branch=debian-upstream
		debian-branch=debian-debian
	</code>
	</li>
</ul>

You can now commit the debian dir in the debian-debian branch.


<h3>Importing the sources</h3>

In the debian-debian branch:
<code>
	git-import-orig ../<i>package</i>_<i>version</i>.orig.tar.gz
</code>
That will import the original sources to the debian-upstream branch, and merge
it with the debian-debian branch.


<h3>Creating the package</h3>

To create the debian package:
<code>
	git-buildpackage --git-tag
</code>

<h3>Importing further versions</h3>

Create the new ../<i>package</i>_<i>version</i>.orig.tar.gz and then:
<code>
	git-import-orig ../<i>package</i>_<i>version</i>.orig.tar.gz
</code>
Edit the debian/changelog file (you can use <i>dch</i> for that), and create a new package:
<code>
	git-buildpackage --git-tag
</code>
Yes, it's that easy.


<h3>Final remarks</h3>

After an initial expensive setup, package creation of further versions is
mostly painless, which is the whole point of git-buildpackage and friends.

Besides this article, you should check the debian/ dir of some already packaged
software for reference. You can look at the
<a href="http://github.com/lpenz/execpermfix">execpermfix repository at github</a>
when first trying to package somthing.

Further information:
<ul>
	<li><a href="http://www.eyrie.org/~eagle/notes/debian/git.html">http://www.eyrie.org/~eagle/notes/debian/git.html</a></li>
	<li><a href="http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.html">http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.html</a></li>
	<li><a href="http://www.debian-administration.org/article/Rolling_your_own_Debian_packages_part_1">http://www.debian-administration.org/article/Rolling_your_own_Debian_packages_part_1</a></li>
</ul>

