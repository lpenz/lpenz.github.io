Create a Debian bootable live USB
How to create a customized bootable live USB with Debian
2013-12-09



= Concepts and motivation =

We can install a full Linux distribution in a USB stick, and use it to boot a
system. That is called a "live USB," and it can be used for recovery,  as a
portable environment that you can boot up on any computer, etc.

In this article we explain how to install a Debian GNU/Linux OS in a USB stick
as if it was a hard disk. We will use Debian's own //debootstrap// to populate
the root partition and //syslinux// as a bootloader (it is simpler than the more
common //grub//).



= Creating the debian live USB =

After inserting the USB drive, it will appear as a block device under ///dev//,
usually //sd[a-z]//. Take a note on the device name. We will use ///dev/sdc//
through the examples.



== 1 Partitioning ==

Create two partitions on our USB drive: one with 256MB for the ///boot// that
will hold the //syslinux// bootloader and the Linux kernel; and another with all
the rest of the space, that will hold the root filesystem.

There are many utilities you can use to partition the USB drive: //parted//,
//fdisk//, etc.

Using fdisk:
```
# fdisk /dev/sdc
Welcome to fdisk (util-linux 2.25.2).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.


Command (m for help):
```

Create the boot partition:
```
Command (m for help): n
Partition type
   p   primary (0 primary, 0 extended, 4 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (1-4, default 1): 1
First sector (2048-31350782, default 2048):
Last sector, +sectors or +size{K,M,G,T,P} (2048-31350782, default 31350782): +256M

Created a new partition 1 of type 'Linux' and of size 256 MiB.

Command (m for help):
```

Set its type to //FAT16//:
```
Command (m for help): t
Selected partition 1
Hex code (type L to list all codes): 6
If you have created or modified any DOS 6.x partitions, please see the fdisk documentation for additional information.
Changed type of partition 'Linux' to 'FAT16'.

Command (m for help):
```

Create the root partition:
```
Command (m for help): n
Partition type
   p   primary (1 primary, 0 extended, 3 free)
   e   extended (container for logical partitions)
Select (default p): p
Partition number (2-4, default 2): 2
First sector (526336-31350782, default 526336):
Last sector, +sectors or +size{K,M,G,T,P} (526336-31350782, default 31350782):

Created a new partition 2 of type 'Linux' and of size 14.7 GiB.

Command (m for help):
```

Check that they were created:
```
Command (m for help): p
Disk /dev/sdc: 15 GiB, 16051600896 bytes, 31350783 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x13090bb3

Device     Boot  Start      End  Sectors  Size Id Type
/dev/sdc1         2048   526335   524288  256M  6 FAT16
/dev/sdc2       526336 31350782 30824447 14.7G 83 Linux


Command (m for help):
```

Save and exit:
```
Command (m for help): w
The partition table has been altered.
Calling ioctl() to re-read partition table.
Syncing disks.

#
```

We now have a ///dev/sdc1// that will be our ///boot//, and ///dev/sdc2// that
will be our root file system. Observe that the boot partition has a MS-DOS
type - that is required //syslinux//.

(the instructions above are heavily based on
[using-syslinux-to-boot-debootstraped http://allskyee.blogspot.com.br/2014/01/using-syslinux-to-boot-debootstraped.html])



== 2 Installing the bootloader ==

Create a FAT16 filesystem on the boot device:
```
# mkdosfs -n LINUXBOOT /dev/sdc1
mkfs.fat 3.0.27 (2014-11-12)
#
```

Install //syslinux// on it:
```
# syslinux /dev/sdc1
#
```



== 3 Populating the root partition ==

Create the filesystem:
```
# mkfs.ext4 /dev/sdc2
mke2fs 1.42.12 (29-Aug-2014)
Creating filesystem with 3853055 4k blocks and 964768 inodes
Filesystem UUID: 68d66fd5-97f2-46ed-aee6-dad6f228a172
Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done

#
```

You can use any filesystem here, as long as it is supported by your future
kernel.

Mount the partition and use //debootstrap// to install the base files on it:
```
# mkdir -p usbroot
# mount -t auto /dev/sdc usbroot
# debootstrap stable usbroot http://ftp.debian.org/debian
(...)
#
```



== 4 On-root configuration ==

We will have to //chroot// into our root filesystem to configure it further.

Mount the boot device and the default ones inside the root mount point:
```
# mount -t devtmpfs dev      usbroot/dev
# mount -t devpts   devpts   usbroot/dev/pts
# mount -t proc     proc     usbroot/proc
# mount -t sysfs    sysfs    usbroot/sys
# mount -t auto     /dev/sc1 usbroot/boot
```

//chroot// into root:
```
# chroot usbroot /bin/bash
```

Set the root user password:
```
# passwd
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
#
```

Install the Linux kernel:
```
# apt-get install --no-install-recommends linux-image-amd64
(...)
#
```

==========================

Create the ///boot/syslinux.cfg// file with the UUID of the root partition found
in the previous step (``49072262-4209-4111-b4a6-53d07a16e9f4`` in this example):
```
# cat > /boot/syslinux.cfg
timeout 1
prompt 1

label current
    kernel vmlinuz-3.2.0-4-amd64
    append initrd=initrd.img-3.2.0-4-amd64 root=UUID=49072262-4209-4111-b4a6-53d07a16e9f4

label backup
    kernel vmlinuz
    append initrd=initrd.gz root=UUID=49072262-4209-4111-b4a6-53d07a16e9f4

```

--------------------

Mount the syslinux partition
Copy the kernel and initrd files to it
# cp root/boot/* syslinux/

(http://quietsche-entchen.de/cgi-bin/wiki.cgi/ariane/BootableUsbStick)
Use blkid to find out the UUID of the partitions.
Create the file syslinux.cfg with the following:
default current

timeout 1
prompt 1

label current
	kernel vmlinuz-3.2.0-4-amd64
	append initrd=initrd.img-3.2.0-4-amd64 root=UUID=49072262-4209-4111-b4a6-53d07a16e9f4

label backup
	kernel vmlinuz
	append initrd=initrd.gz root=UUID=49072262-4209-4111-b4a6-53d07a16e9f4

Unmount both partitions
umount dev/pts
umount dev
umount proc
umount sys


Install mbr:
cat /usr/lib/SYSLINUX/mbr.bin > /dev/sdc



= References =

- http://allskyee.blogspot.com.br/2014/01/using-syslinux-to-boot-debootstraped.html
- http://quietsche-entchen.de/cgi-bin/wiki.cgi/ariane/BootableUsbStick

