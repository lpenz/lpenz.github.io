#!/usr/bin/env python3
"""Create gnupg logs for gpg article"""

import sys
import os
import re
import functools
import subprocess
from contextlib import contextmanager
import tempfile
import pexpect
import argparse
import yaml
from io import StringIO

pjoin = os.path.join


@contextmanager
def chdir(d):
    old = os.getcwd()
    os.chdir(d)
    yield
    os.chdir(old)


class Session(pexpect.spawn):
    def __init__(self, env=None, preproc=None, data=None):
        env_ = {"PS1": "\\$ ", "PS2": "=>"}
        env_.update(env or {})
        pexpect.spawn.__init__(
            self,
            "bash",
            ["--norc"],
            encoding="utf-8",
            timeout=10,
            # echo=False,
            env=env_,
        )
        self.preproc = preproc
        self.data = data
        self._prompt = "[#$] $"
        self._logfd = None
        self._pending = ""
        self.waitready()
        self.sendwait('export PS1="$ "')
        self.sendwait("stty cols 9999")

    def log(self, s):
        if self.preproc:
            s = self.preproc(s)
        sys.stdout.write(s)
        if self._logfd:
            self._logfd.write(s)

    def process(self):
        self.log(self._pending)
        self._pending = ""
        m = self.match
        i1, i2 = m.span()
        self.log(m.string[0:i1])
        self._pending += m.string[i1:]

    def waitready(self, prompt=None):
        prompt = prompt or self._prompt
        try:
            self.expect(prompt)
        except pexpect.TIMEOUT:
            print(self._pending)
            raise
        return self.process()

    @contextmanager
    def logging(self, key=None):
        fd = StringIO()
        self._logfd = fd
        yield fd
        self._logfd = None
        if self.data is not None and key:
            self.data[key] = fd.getvalue()
        fd.close()

    @contextmanager
    def prompt(self, prompt):
        oldprompt = self._prompt
        self._prompt = prompt
        yield
        self._prompt = oldprompt

    def sendwait(self, s, prompt=None, invisible=False):
        # ini/end_bold smuggles html <b> through pandoc
        self._pending += "{b}%s{/b}" % s
        pexpect.spawn.send(self, s + "\r")
        if invisible:
            self._pending += "\n"
        else:
            self.expect(re.escape(s) + "\r")
        return self.waitready(prompt=prompt)

    def sendpass(self, s):
        return self.sendwait(s, invisible=True)

    def done(self):
        pexpect.spawn.send(self, "exit\r")
        self.expect(pexpect.EOF)
        self.wait()


@contextmanager
def bgprocess(cmd):
    r = subprocess.Popen(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    yield
    r.kill()
    r.wait()


def logfix(passphrase, s):
    s = re.sub("/tmp/tmp[a-z0-9_]{8}/", "", s)
    s = re.sub(r"\s+\r", "", s)
    return s


def gpgconfwrite(gpgconf, d):
    with open(pjoin(d, "gpg.conf"), "w") as fd:
        with open(gpgconf, "r") as fd_gpgconf:
            fd.write(fd_gpgconf.read())
        fd.write("pinentry-mode loopback\n")


def do_main(gpgconf, outputfile):
    data = {}
    passphrase = "mypassphrase"
    p = Session(data=data, preproc=functools.partial(logfix, passphrase))
    with tempfile.TemporaryDirectory() as tmpdir:
        gpgconfwrite(gpgconf, tmpdir)
        p.sendwait("FULLNAME='Leandro Lisboa Penz'")
        p.sendwait("EMAIL=lpenz@lpenz.org")
        # Start sesssion
        p.sendwait("export GNUPGHOME=%s" % tmpdir)
        with bgprocess(["find", "/", "-type", "f"]):
            # Create key:
            with p.logging("genkey") as logfd:
                p.sendwait(
                    "gpg --quick-gen-key " '"$FULLNAME <$EMAIL>" ' "default sign 0",
                    ": $",
                )
                p.sendpass(passphrase)
                genkey = logfd.getvalue()
        with p.logging("gpglist1"):
            p.sendwait("gpg -k")
        # Figure out uuid:
        m_masteruuid = re.search("pub *[^/]+/([0-9A-F]+) ", genkey)
        masteruuid = m_masteruuid.group(1)
        p.sendwait("masterkeyid=%s" % masteruuid)
        data["masteruuid"] = masteruuid
        m_masterfpr = re.search("Key fingerprint = ([ A-F0-9]+)", genkey)
        masterfpr = m_masterfpr.group(1)
        data["masterfpr"] = masterfpr
        re_uuid = re.compile("(ssb|sec) +rsa[0-9]+/(?P<uuid>[0-9A-F]+)")
        # Go to editkey prompt:
        with p.logging("adduid"):
            with p.prompt(": $"):
                p.sendwait(
                    "gpg --quick-add-uid "
                    '"$FULLNAME <$EMAIL>" '
                    '"$FULLNAME <llpenz@gmail.com>"'
                )
            with bgprocess(["find", "/", "-type", "f"]):
                p.sendpass(passphrase)
        with p.logging("gpglist2"):
            p.sendwait("gpg -k")
        with p.logging("uidprimary"):
            p.sendwait('gpg --edit-key "$masterkeyid" uid 2 primary save')
            p.sendwait("gpg --check-trustdb")
        with p.logging("gpglist3"):
            p.sendwait("gpg -k")
        with p.logging("gpgprivlist3"):
            p.sendwait("gpg -K")
        with p.logging("masterkeyexport") as logfd:
            p.sendwait(
                "gpg --armor " "--output /tmp/master.pub.gpg " '--export "$masterkeyid"'
            )
        with tempfile.TemporaryDirectory() as tmpdir2:
            gpgconfwrite(gpgconf, tmpdir2)
            p.sendwait("export GNUPGHOME=%s" % tmpdir2)
            with p.logging("masterkeyimport") as logfd:
                p.sendwait("gpg --import /tmp/master.pub.gpg")
            with p.logging("masterkeytrust") as logfd:
                p.sendwait('gpg --edit-key "$masterkeyid" trust save', r"\? $")
                p.sendwait("5", r"\) $")
                p.sendwait("y")
            with p.logging("gpglistmasterimport") as logfd:
                p.sendwait("gpg -k")
            with p.logging("gpgprivlistmasterimport") as logfd:
                p.sendwait("gpg -K")
        p.sendwait("export GNUPGHOME=%s" % tmpdir)
        with p.logging("subkeyadd") as logfd:
            with p.prompt("\\?[ ?0-9()yN/]* $"):
                p.sendwait(
                    "gpg"
                    " --cert-notation host@lpenz.org=darkstar"
                    " --cert-notation service@lpenz.org=github"
                    ' --edit-key "$masterkeyid" addkey save'
                )
                p.sendwait("4")
                p.sendwait("")
                p.sendwait("")
                p.sendwait("y")
            p.sendwait("y", ": $")
            p.sendpass(passphrase)
        for host in ["redplanet", "brightmoon"]:
            for service in ["github", "email"]:
                with p.prompt("\\?[ ?0-9()yN/]* $"):
                    p.sendwait(
                        "gpg"
                        " --cert-notation host@lpenz.org=%s"
                        " --cert-notation service@lpenz.org=%s"
                        ' --edit-key "$masterkeyid" addkey save' % (host, service)
                    )
                    p.sendwait("4")
                    p.sendwait("")
                    p.sendwait("")
                    p.sendwait("y")
                p.sendwait("y", ": $")
                p.sendpass(passphrase)
        m_uuid = re_uuid.findall(data["subkeyadd"])
        subkeyuuid = [u[1] for u in m_uuid if u[0] == "ssb"][0]
        data["subkeyuuid"] = subkeyuuid
        with p.logging("listpub") as logfd:
            p.sendwait("gpg -k")
        with p.logging("listpriv") as logfd:
            p.sendwait("gpg -K")
        with p.logging("subkeyexport") as logfd:
            p.sendwait(
                "gpg --armor --output /tmp/newkey.sec.gpg"
                " --export-secret-subkey %s!" % subkeyuuid,
                ": $",
            )
            p.sendpass(passphrase)
        with tempfile.TemporaryDirectory() as tmpdir2:
            gpgconfwrite(gpgconf, tmpdir2)
            p.sendwait("export GNUPGHOME=%s" % tmpdir2)
            p.sendwait("gpg --import /tmp/master.pub.gpg")
            p.sendwait('gpg --edit-key "$masterkeyid" trust save', r"\? $")
            p.sendwait("5", r"\) $")
            p.sendwait("y")
            with p.logging("subkeyimport") as logfd:
                p.sendwait("gpg --import /tmp/newkey.sec.gpg", ": $")
                p.sendpass(passphrase)
            p.sendwait("gpg --check-trustdb")
            with p.logging("subkeylist") as logfd:
                p.sendwait("gpg -k")
            with p.logging("subkeyprivlist") as logfd:
                p.sendwait("gpg -K")
            with p.logging("subkeyaddfail") as logfd:
                p.sendwait("gpg" ' --edit-key "$masterkeyid" addkey save')
            with p.logging("gpgsigntest") as logfd:
                p.sendwait('echo "test" | gpg --clearsign', "Enter passphrase: $")
                p.sendpass(passphrase)
            # git:
            homedir = tempfile.TemporaryDirectory()
            p.sendwait("export HOME=%s" % homedir.name)
            p.sendwait('git config --global user.name "Leandro Lisboa Penz"')
            p.sendwait('git config --global user.email "lpenz@lpenz.org"')
            p.sendwait("git config --global init.defaultBranch main")
            p.sendwait("git config --global core.pager ''")
            p.sendwait("git config --global user.signingkey %s" % subkeyuuid)
            with tempfile.TemporaryDirectory() as tmpdir3:
                p.sendwait("cd %s" % tmpdir3)
                p.sendwait("git init")
                p.sendwait("echo > test.txt")
                p.sendwait("git add test.txt")
                with p.logging("gitcommit"):
                    p.sendwait(
                        "git commit -S -m 'Add a commit message here'",
                    )
                with p.logging("gitlogsign"):
                    p.sendwait("git log -1 --show-signature")
                with p.logging("gpgprintkey"):
                    p.sendwait("gpg --armor --export %s" % subkeyuuid)
            p.done()
    with open(outputfile, "w") as fd:
        yaml.dump(data, fd, indent=4)


def main():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("gpgconf")
    parser.add_argument("outputfile")
    args = parser.parse_args()
    do_main(args.gpgconf, args.outputfile)


if __name__ == "__main__":
    main()
