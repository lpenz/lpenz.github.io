
from glob import glob

if False: Import=None; env=None; htmlsitefiles=None
Import(['env', 'htmlsitefiles'])

if False:
    env.Command('dists/lpenz/main/source/Sources',        glob('packages/*.dsc'), '(set -e; cd debian; dpkg-scansources  packages) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/main/source/Sources.bz2',       'dists/lpenz/main/source/Sources'       , '(set -e; cat $SOURCE | bzip2 -9c) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/main/binary-i386/Packages',  glob('packages/*_i386.deb') + glob('packages/*_all.deb'), '(set -e; cd debian; dpkg-scanpackages packages) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/main/binary-i386/Packages.bz2', 'dists/lpenz/main/binary-i386/Packages' , '(set -e; cat $SOURCE | bzip2 -9c) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/main/binary-amd64/Packages',  glob('packages/*_amd64.deb') + glob('packages/*_all.deb'), '(set -e; cd debian; dpkg-scanpackages packages) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/main/binary-amd64/Packages.bz2', 'dists/lpenz/main/binary-amd64/Packages' , '(set -e; cat $SOURCE | bzip2 -9c) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    #env.Command('Contents.gz',  glob('incoming/*.deb'), 'apt-ftparchive contents . | gzip -9c > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET.file}', chdir=1)
    env.Command('dists/lpenz/Release',   ['dists/lpenz/main/binary-i386/Packages.bz2', 'dists/lpenz/main/binary-amd64/Packages.bz2', 'dists/lpenz/main/source/Sources.bz2', 'lpenz-apt-release.conf'], '(set -e; apt-ftparchive -c debian/lpenz-apt-release.conf release debian/dists/lpenz) > ${TARGET.file}.tmp && mv ${TARGET.file}.tmp ${TARGET}')
    env.Command('dists/lpenz/Release.gpg', 'dists/lpenz/Release', 'gpg --output ${TARGET} -ba ${SOURCE}')

indexbuild = env.File('indexbuild')
env.Command('index.t2t', ['lpenz.list']+env.Glob('packages/*.changes'), indexbuild.abspath + ' ${TARGET} ${SOURCES}')
env.Depends('index.t2t', indexbuild)

# TODO: manuals
#for f in env.Glob('packages/*.orig.tar.gz'):
#    m = re.match('^packages/([^_]+)_([0-9._-]+).orig.tar.gz$', str(f))
#    assert m
#    name = m.group(1)
#    vers = m.group(2)
#    t2t = '%s.t2t' % name
#    env.Command(t2t, f, 'tar -xzOf $SOURCE %s_%s/manual.t2t > ${TARGET}.tmp && mv ${TARGET}.tmp $TARGET' % (name, vers))
#    env.MAKO(t2t, MAKOFLAGS='-t base')
#    htmlsitefiles.add('debian/%s.html' % name)

env.MAKO('index.t2t', MAKOFLAGS='-t base')
htmlsitefiles.add('debian/index.html')

